# This file is just Python, with a touch of Django which means
# you can inherit and tweak settings to your hearts content.
from sentry.conf.server import *

import os.path

CONF_ROOT = os.path.dirname(__file__)
SECRET_KEY = '{{sentry_secret_key}}'
SENTRY_URL_PREFIX = '{{sentry_url_prefix}}'

DATABASES = {
    'default': {
        'ENGINE': 'sentry.db.postgres',
        'NAME': '{{sentry_db_name}}',
        'USER': '{{sentry_db_user}}',
        'PASSWORD': '{{sentry_db_password}}',
        'HOST': '{{sentry_db_host}}',
        'PORT': '{{sentry_db_port}}',
    }
}

# You should not change this setting after your database has been created
# unless you have altered all schemas first
SENTRY_USE_BIG_INTS = True

# If you're expecting any kind of real traffic on Sentry, we highly recommend
# configuring the CACHES and Redis settings

###########
# General #
###########

# Instruct Sentry that this install intends to be run by a single organization
# and thus various UI optimizations should be enabled.
{% if sentry_single_organization %}
SENTRY_SINGLE_ORGANIZATION = True
{% else %}
SENTRY_SINGLE_ORGANIZATION = False
{% endif %}

#########
# Redis #
#########

# Generic Redis configuration used as defaults for various things including:
# Buffers, Quotas, TSDB

SENTRY_REDIS_OPTIONS = {
    'hosts': {
        0: {
            'host': '{{sentry_redis_host}}',
            'port': {{sentry_redis_port}},
        }
    }
}

#########
# Cache #
#########

# A primary cache is required for things such as processing events
SENTRY_CACHE = 'sentry.cache.redis.RedisCache'

#########
# Queue #
#########

# See https://docs.getsentry.com/on-premise/server/queue/ for more
# information on configuring your queue broker and workers. Sentry relies
# on a Python framework called Celery to manage queues.

BROKER_URL = '{{sentry_broker_url}}'

###############
# Rate Limits #
###############

# Rate limits apply to notification handlers and are enforced per-project
# automatically.

SENTRY_RATELIMITER = 'sentry.ratelimits.redis.RedisRateLimiter'

##################
# Update Buffers #
##################

# Buffers (combined with queueing) act as an intermediate layer between the
# database and the storage API. They will greatly improve efficiency on large
# numbers of the same events being sent to the API in a short amount of time.
# (read: if you send any kind of real data to Sentry, you should enable buffers)

SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'

##########
# Quotas #
##########

# Quotas allow you to rate limit individual projects or the Sentry install as
# a whole.

SENTRY_QUOTAS = 'sentry.quotas.redis.RedisQuota'

########
# TSDB #
########

# The TSDB is used for building charts as well as making things like per-rate
# alerts possible.

SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'

###########
# Digests #
###########

# The digest backend powers notification summaries.

SENTRY_DIGESTS = 'sentry.digests.backends.redis.RedisBackend'

################
# File storage #
################

# Any Django storage backend is compatible with Sentry. For more solutions see
# the django-storages package: https://django-storages.readthedocs.org/en/latest/

SENTRY_FILESTORE = '{{sentry_filestore}}'
SENTRY_FILESTORE_OPTIONS = {{sentry_filestore_options|to_nice_json}}

##############
# Web Server #
##############

# If you're using a reverse SSL proxy, you should enable the X-Forwarded-Proto
# header and uncomment the following settings
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True

# If you're not hosting at the root of your web server, and not using uWSGI,
# you need to uncomment and set it to the path where Sentry is hosted.
# FORCE_SCRIPT_NAME = '/sentry'

SENTRY_WEB_HOST = '{{sentry_web_host}}'
SENTRY_WEB_PORT = {{sentry_web_port}}
SENTRY_WEB_OPTIONS = {{sentry_web_options|to_nice_json}}

###############
# Mail Server #
###############

# For more information check Django's documentation:
# https://docs.djangoproject.com/en/1.6/topics/email/

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = '{{sentry_email_host}}'
EMAIL_HOST_PASSWORD = '{{sentry_email_password}}'
EMAIL_HOST_USER = '{{sentry_email_user}}'
EMAIL_PORT = {{sentry_email_port}}
EMAIL_USE_TLS = {{sentry_email_use_tls}}
EMAIL_USE_SSL = {{sentry_email_use_ssl}}

# The email address to send on behalf of
SERVER_EMAIL = '{{sentry_server_email}}'

# If you're using mailgun for inbound mail, set your API key and configure a
# route to forward to /api/hooks/mailgun/inbound/
{% if mailgun_api_key is defined %}
MAILGUN_API_KEY = '{{mailgun_api_key}}'
{% endif %}

ALLOWED_HOSTS = {{sentry_allowed_hosts}}

# Additional settings
{% for option in sentry_config_additional or [] %}
{{option}}
{% endfor %}
